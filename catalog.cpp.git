#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include <nlohmann/json.hpp>

using namespace std;
using json = nlohmann::json;

long long convertToDecimal(const string& value, int base) {
    long long result = 0;
    long long multiplier = 1;
    for (int i = value.size() - 1; i >= 0; --i) {
        char digit = value[i];
        int digitValue;
        if (digit >= '0' && digit <= '9') {
            digitValue = digit - '0';
        } else {
            digitValue = digit - 'A' + 10;
        }
        result += digitValue * multiplier;
        multiplier *= base;
    }
    return result;
}

double lagrangeInterpolation(const map<int, long long>& points) {
    double constantTerm = 0;
    
    for (const auto& p1 : points) {
        double term = p1.second;
        for (const auto& p2 : points) {
            if (p1.first != p2.first) {
                term *= static_cast<double>(-p2.first) / (p1.first - p2.first);
            }
        }
        constantTerm += term;
    }
    
    return constantTerm;
}

int main() {
    ifstream inputFile("testcase.json");
    json inputJson;
    inputFile >> inputJson;

    map<int, pair<int, string>> input;
    
    int n = inputJson["keys"]["n"];
    int k = inputJson["keys"]["k"];

    for (auto& key : inputJson["keys"].items()) {
        if (key.key() == "n" || key.key() == "k") continue;

        int x = stoi(key.key());
        int base = stoi(key.value()["base"].get<string>());
        string value = key.value()["value"];
        input[x] = {base, value};
    }

    map<int, long long> points;
    
    for (const auto& entry : input) {
        int x = entry.first;
        int base = entry.second.first;
        string value = entry.second.second;
        long long y = convertToDecimal(value, base);
        points[x] = y;
    }

    double constantTerm = lagrangeInterpolation(points);

    cout << "The constant term is: " << constantTerm << endl;

    return 0;
}
